name: Build, Push Docker Image, and Deploy to EKS

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Checkout the code
    - name: Checkout code
      uses: actions/checkout@v3

    # Set up Docker Hub credentials
    - name: Set up Docker Hub credentials
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}   
        password: ${{ secrets.DOCKER_PASSWORD }}    

    # Build Docker image
    - name: Build Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_REPOSITORY }}:${{ github.sha }} .

    # Install Trivy for image scanning
    - name: Install Trivy
      run: |
        wget https://github.com/aquasecurity/trivy/releases/download/v0.18.3/trivy_0.18.3_Linux-64bit.deb
        sudo dpkg -i trivy_0.18.3_Linux-64bit.deb

    # Scan Docker image with Trivy for vulnerabilities
    - name: Scan Docker image with Trivy
      run: |
        trivy image --exit-code 1 --no-progress ${{ secrets.DOCKER_REPOSITORY }}:${{ github.sha }}
      continue-on-error: false

    # Push Docker image to Docker Hub
    - name: Push Docker image to Docker Hub
      run: |
        docker push ${{ secrets.DOCKER_REPOSITORY }}:${{ github.sha }}
    
    # Install mailx to send email notifications
    - name: Install mailx
      run: sudo apt-get install -y mailutils

    # Send Email Notification - Build Started
    - name: Send Email Notification - Build Started
      run: |
        echo "Build started for commit ${{ github.sha }}" | mail -s "Build Started" ${{ secrets.EMAIL_TO }} -r ${{ secrets.EMAIL_FROM }}
    
    # Send Email Notification - Build Successful
    - name: Send Email Notification - Build Successful
      if: success()
      run: |
        echo "Build succeeded for commit ${{ github.sha }}" | mail -s "Build Succeeded" ${{ secrets.EMAIL_TO }} -r ${{ secrets.EMAIL_FROM }}
    
    # Send Email Notification - Build Failed
    - name: Send Email Notification - Build Failed
      if: failure()
      run: |
        echo "Build failed for commit ${{ github.sha }}" | mail -s "Build Failed" ${{ secrets.EMAIL_TO }} -r ${{ secrets.EMAIL_FROM }}

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    # Checkout code again in the deploy job
    - name: Checkout code
      uses: actions/checkout@v3

    # Set up AWS credentials using GitHub secrets 
    - name: Set up AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # Set up kubectl (this step installs kubectl)
    - name: Set up kubectl
      uses: azure/setup-kubectl@v1

    # Set the kubeconfig context 
    - name: Set kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}

    # Update the Docker image in Kubernetes using kubectl set image
    - name: Update the Docker image in Kubernetes deployment
      run: |
        kubectl set image deployment/nodejs-app nodejs-app=${{ secrets.DOCKER_REPOSITORY }}:${{ github.sha }} --namespace app-namespace
        kubectl rollout status deployment/nodejs-app --namespace app-namespace  # Wait for the deployment to complete

    # Optionally, check the status of the deployed application
    - name: Check Kubernetes deployment status
      run: |
        kubectl get pods --namespace app-namespace

     # Install mailx to send email notifications
    - name: Install mailx
      run: sudo apt-get install -y mailutils  

     # Send Email Notification - Deploy Started
    - name: Send Email Notification - Deploy Started
      run: |
        echo "Deployment started for commit ${{ github.sha }}" | mail -s "Deployment Started" ${{ secrets.EMAIL_TO }} -r ${{ secrets.EMAIL_FROM }}
    
    # Send Email Notification - Deploy Successful
    - name: Send Email Notification - Deploy Successful
      if: success()
      run: |
        echo "Deployment succeeded for commit ${{ github.sha }}" | mail -s "Deployment Succeeded" ${{ secrets.EMAIL_TO }} -r ${{ secrets.EMAIL_FROM }}
    
    # Send Email Notification - Deploy Failed
    - name: Send Email Notification - Deploy Failed
      if: failure()
      run: |
        echo "Deployment failed for commit ${{ github.sha }}" | mail -s "Deployment Failed" ${{ secrets.EMAIL_TO }} -r ${{ secrets.EMAIL_FROM }}
